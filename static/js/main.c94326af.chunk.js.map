{"version":3,"sources":["serviceWorker.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingVisualizer/starknet/jps.js","mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js","assets/preview.gif","assets/resolved.gif"],"names":["Boolean","window","location","hostname","match","Node","props","state","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","extraClass","id","className","style","Component","brand","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeJPS","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","value","updateSpeed","href","type","onClick","visualizeAlgorithm","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","selectMaze","generateMaze","changeSpeed","color","placeholder","onChange","e","handleNumColumns","target","handleNumRows","startX","startY","endX","endY","grid","gridWidth","gridHeight","a","arr","convertGridToPoints","map","element","String","provider","Provider","pathFinder","Contract","JPSAbi","path_finder","pathFinderResult","parsedResult","y","toString","x","reverse","walls","initialGrid","i","length","j","push","recursiveDivisionMaze","startNode","finishNode","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","array","max","randomNum","Math","floor","random","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","PathfindingVisualizer","mouseIsPressed","width","height","innerHeight","numRows","numColumns","mazeSpeed","isLoading","resolved","updateDimensions","path","console","log","getInitialGrid","animateShortestPath","nodesInShortestPathOrder","visitedNodesInOrder","setTimeout","node","jp","document","getElementById","animateAlgorithm","newGrid","newNode","animateRandomWalk","isWalkableAt","isInside","animateMaze","getNewGridWithMaze","addEventListener","getNewGridWithWalls","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","nodeA","nodeB","getVisitedNodesInOrder","undefined","jps","then","elem1","elem2","Number","dx","abs","dy","alert","catch","err","sort","randomMaze","Fragment","bind","src","loading","display","marginLeft","marginRight","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","distance","Infinity","totalDistance","previousNode","n","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.c94326af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // console.log(\n          //   'This web app is being served cache-first by a service ' +\n          //     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          // );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isWall,\n      isVisited,\n      isShortest,\n      onMouseEnter,\n      onMouseDown,\n      onMouseUp\n    } = this.props;\n\n    const extraClass = isStart\n      ? \"node node-start\"\n      : isFinish\n      ? \"node node-finish\"\n      : isWall\n      ? \"node-wall\"\n      : isShortest\n      ? \"node node-shortest-path\"\n      : isVisited\n      ? \"node node-visited\"\n      : \"node\";\n\n    let cellWidth = 30;\n    let cellHeight = 30;\n\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`${extraClass}`}\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\n\nclass NavBar extends Component {\n  state = {\n    algorithm: \"Run JPS \",\n    maze: \"Generate Maze\",\n    pathState: false,\n    mazeState: false,\n    speedState: \"Speed\",\n  };\n\n  selectAlgorithm(selection) {\n    if (this.props.visualizingAlgorithm) {\n      return;\n    }\n    if (\n      selection === this.state.algorithm ||\n      this.state.algorithm === \"Visualize Algorithm\" ||\n      this.state.algorithm === \"Select an Algorithm!\"\n    ) {\n      this.setState({ algorithm: selection });\n    } else if (this.state.pathState) {\n      this.clearPath();\n      this.setState({ algorithm: selection });\n    } else {\n      this.setState({ algorithm: selection });\n    }\n  }\n\n  selectMaze(selection) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (\n      selection === this.state.maze ||\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: selection });\n    } else if (!this.state.mazeState) {\n      this.setState({ maze: selection });\n    } else {\n      this.clearGrid();\n      this.setState({ maze: selection });\n    }\n  }\n\n  visualizeAlgorithm() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (this.state.pathState) {\n      this.clearTemp();\n      return;\n    }\n    this.props.visualizeJPS();\n  }\n\n  generateMaze() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    if (this.state.mazeState || this.state.pathState) {\n      this.clearTemp();\n    }\n    if (\n      this.state.maze === \"Generate Maze\" ||\n      this.state.maze === \"Select a Maze!\"\n    ) {\n      this.setState({ maze: \"Select a Maze!\" });\n    } else {\n      this.setState({ mazeState: true });\n      if (this.state.maze === \"Generate Random Maze\")\n        this.props.generateRandomMaze();\n      else if (this.state.maze === \"Generate Recursive Maze\")\n        this.props.generateRecursiveDivisionMaze();\n      else if (this.state.maze === \"Generate Vertical Maze\")\n        this.props.generateVerticalMaze();\n      else if (this.state.maze === \"Generate Horizontal Maze\")\n        this.props.generateHorizontalMaze();\n    }\n  }\n\n  clearGrid() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      algorithm: \"Run JPS\",\n      maze: \"Generate Maze\",\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearPath() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearPath();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  clearTemp() {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    this.props.clearGrid();\n    this.setState({\n      pathState: false,\n      mazeState: false,\n    });\n  }\n\n  changeSpeed(speed) {\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\n      return;\n    }\n    let value = [10, 10];\n    if (speed === \"Slow\") value = [50, 30];\n    else if (speed === \"Medium\") value = [25, 20];\n    else if (speed === \"Fast\") value = [10, 10];\n    this.setState({ speedState: speed });\n    this.props.updateSpeed(value[0], value[1]);\n  }\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a\n          className=\"navbar-brand h1 mb-0\"\n          href=\"https://dpinones.github.io/pathfinding-visualizer/\"\n        >\n          {brand}\n        </a>\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item dropdown\">\n              {/* <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-light dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  Algorithms\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectAlgorithm(\"Visualize JPS\")}\n                  >\n                    JPS\n                  </button>\n                </div>\n              </div>{\" \"} */}\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => this.visualizeAlgorithm()}\n              >\n                {this.state.algorithm}\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-light dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  Mazes\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\n                  >\n                    Random Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\n                  >\n                    Recursive Division Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\n                  >\n                    Vertical Division Maze\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\n                  >\n                    Horizontal Division Maze\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => this.generateMaze()}\n              >\n                {this.state.maze}\n              </button>\n            </li>\n            <li>\n              <button\n                type=\"button\"\n                className=\"btn btn-danger\"\n                onClick={() => this.clearGrid()}\n              >\n                Clear Grid\n              </button>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className=\"dropdown\">\n                <button\n                  className=\"btn btn-info dropdown-toggle\"\n                  type=\"button\"\n                  id=\"dropdownMenu1\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  {this.state.speedState}\n                </button>\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Slow\")}\n                  >\n                    Slow\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Medium\")}\n                  >\n                    Medium\n                  </button>\n                  <button\n                    className=\"dropdown-item btn-light\"\n                    type=\"button\"\n                    onClick={() => this.changeSpeed(\"Fast\")}\n                  >\n                    Fast\n                  </button>\n                </div>\n              </div>{\" \"}\n            </li>\n\n            <li>\n              <font\n                color=\"#FFFFFF\">\n                Width: \n              </font>\n              <input className=\"btn btn-light dropdown-toggle\" placeholder=\"5-30\" type=\"number\" onChange={e => this.props.handleNumColumns(e.target.value)}/>\n            </li>\n\n            <li>\n            <font\n                color=\"#FFFFFF\">\n                Height: \n              </font>\n              <input className=\"btn btn-light dropdown-toggle\" placeholder=\"5-30\"  type=\"number\"  onChange={e => this.props.handleNumRows(e.target.value)}/>\n            </li>\n\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\nexport default NavBar;","import {\n    Contract,\n    Provider,\n    } from \"starknet\";\n\nimport JPSAbi from '../abi/main_abi.json'\n\nexport async function jps(startX, startY, endX, endY, grid, gridWidth, gridHeight) {\n    const arr = convertGridToPoints(grid).map(element => String(element));\n    \n    const provider = new Provider();\n    const pathFinderAddress = \"0x06a7831d176659e82766a335b63bf87817b16e176df703d54231f9e178cab0d8\";\n    const pathFinder = new Contract(JPSAbi, pathFinderAddress, provider);\n    const pathFinderResult = await pathFinder.path_finder(String(startX), String(startY), String(endX), String(endY), arr, String(gridWidth), String(gridHeight));\n    if(!pathFinderResult){\n        return [];\n    } else {\n        if(pathFinderResult[0] === 0){\n            return [];\n        }\n        const parsedResult = pathFinderResult[0].map(element => {\n            return {\n                row: element.y.toString(),\n                col: element.x.toString(),\n            }\n        })\n        parsedResult.reverse();\n        return parsedResult;\n    }\n}\n\nconst convertGridToPoints = (grid) => {\n    const initialGrid = [];\n    let maps = '';\n    for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j].isWall) {\n        initialGrid.push(1);\n        maps = maps + '1,'\n        } else {\n        initialGrid.push(0);\n        maps = maps + '0,'\n        }\n    }\n    }\n    return initialGrid;\n}","let walls;\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let dir;\n  let num;\n  if (vertical.length > horizontal.length) {\n    dir = 0;\n    num = generateOddRandomNumber(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    dir = 1;\n    num = generateOddRandomNumber(horizontal);\n  }\n\n  if (dir === 0) {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical.slice(0, vertical.indexOf(num)),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical.slice(vertical.indexOf(num) + 1),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n  } else {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(num)),\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(num) + 1),\n      grid,\n      startNode,\n      finishNode\n    );\n  }\n}\n\nfunction generateOddRandomNumber(array) {\n  let max = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return array[randomNum];\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  if (dir === 0) {\n    if (horizontal.length === 2) return;\n    for (let temp of horizontal) {\n      if (\n        (temp === startNode.row && num === startNode.col) ||\n        (temp === finishNode.row && num === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([temp, num]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temp of vertical) {\n      if (\n        (num === startNode.row && temp === startNode.col) ||\n        (num === finishNode.row && temp === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([num, temp]);\n    }\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\nfunction generateRandomNumber(max) {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return randomNum;\n}\n","let walls;\nexport function verticalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\n  if (vertical.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of vertical) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of horizontal) {\n    if (\n      (temp === startNode.row && num === startNode.col) ||\n      (temp === finishNode.row && num === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([temp, num]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n","let walls;\nexport function horizontalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\n  if (horizontal.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of horizontal) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, vertical, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of vertical) {\n    if (\n      (num === startNode.row && temp === startNode.col) ||\n      (num === finishNode.row && temp === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([num, temp]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./pathfindingVisualizer.css\";\nimport Node from \"./Node/node\";\nimport NavBar from \"./navbar\";\n\n//Pathfinding Algorithms\nimport { jps } from \"./starknet/jps\";\n\n//Maze Algorithms\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\nimport loading from '../assets/preview.gif'\nimport resolved from '../assets/resolved.gif'\n\nconst initialNumRows = 15;\nconst initialNumColumns = 15;\n\nconst startNodeRow = 1;\nconst startNodeCol = 1;\n\nclass PathfindingVisualizer extends Component {\n\n  state = {\n    grid: [],\n    mouseIsPressed: false,\n    visualizingAlgorithm: false,\n    generatingMaze: false,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    numRows: initialNumRows,\n    numColumns: initialNumColumns,\n    speed: 10,\n    mazeSpeed: 10,\n    isLoading: false,\n    resolved: false,\n  };\n\n  updateDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  updateSpeed = (path, maze) => {\n    this.setState({ speed: path, mazeSpeed: maze });\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed) {\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleNumRows = (value) => {\n    \n    if(value >= 5 && value <= 30){\n      console.log(\"handleNumRows:\", value);\n      this.setState(\n          {numRows: value}\n        ,\n        () => {\n          console.log(\"this.state.numRows: \", this.state.numRows);\n          console.log(\"this.state.numColumns: \", this.state.numColumns);\n\n          const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n          this.setState({ grid });\n          this.clearGrid();\n          this.setState({\n            algorithm: \"Run JPS\",\n            maze: \"Generate Maze\",\n            pathState: false,\n            mazeState: false,\n          });\n        });\n    }\n  }\n\n  handleNumColumns(value) {\n    \n    if(value >= 5 && value <= 30){\n      console.log(\"handleNumColumns:\", value);\n      this.setState(\n            {numColumns: value}\n          , () => {\n            const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\n            this.setState({ grid });\n            this.clearGrid();\n            this.setState({\n              algorithm: \"Run JPS\",\n              maze: \"Generate Maze\",\n              pathState: false,\n              mazeState: false,\n            });\n          }\n      );\n      \n    }\n\n  }\n\n  clearGrid() {\n    this.setState({ resolved: false });\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          !(\n            (row === startNodeRow && col === startNodeCol) ||\n            (row === this.state.numRows - 2 && col === this.state.numColumns - 2)\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  clearPath() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < this.state.grid.length; row++) {\n      for (let col = 0; col < this.state.grid[0].length; col++) {\n        if (\n          document.getElementById(`node-${row}-${col}`).className ===\n          \"node node-shortest-path\"\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getGridWithoutPath(this.state.grid);\n    this.setState({\n      grid: newGrid,\n      visualizingAlgorithm: false,\n      generatingMaze: false,\n    });\n  }\n\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\n    if (nodesInShortestPathOrder.length === 1)\n      this.setState({ visualizingAlgorithm: false });\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\n      if (i === nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          // let newGrid = updateNodesForRender(\n          //   this.state.grid,\n          //   nodesInShortestPathOrder,\n          //   visitedNodesInOrder\n          // );\n          this.setState({ grid: this.state.grid, visualizingAlgorithm: false });\n        }, i * (3 * this.state.speed));\n        return;\n      }\n      let node = nodesInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path node\n        if(node.jp){\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-jp\";\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n        }\n\n      }, i * (3 * this.state.speed));\n    }\n  };\n\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let newGrid = this.state.grid.slice();\n    for (let row of newGrid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          isVisited: false,\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n  animateRandomWalk = (visitedNodesInOrder) => {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.setState({ visualizingAlgorithm: false });\n        }, i * this.state.speed);\n        return;\n      }\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          //finish node\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-finish-reached\";\n        }, i * this.state.speed);\n        continue;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  };\n\n  animateBidirectionalAlgorithm(\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish,\n    nodesInShortestPathOrder,\n    isShortedPath\n  ) {\n    let len = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(\n            visitedNodesInOrderStart,\n            visitedNodesInOrderFinish\n          );\n          if (isShortedPath) {\n            this.animateShortestPath(\n              nodesInShortestPathOrder,\n              visitedNodesInOrder\n            );\n          } else {\n            this.setState({ visualizingAlgorithm: false });\n          }\n        }, i * this.state.speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined)\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n            \"node node-visited\";\n        if (nodeB !== undefined)\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n            \"node node-visited\";\n      }, i * this.state.speed);\n    }\n  }\n\n  visualizeJPS() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ resolved: false });\n    this.setState({ visualizingAlgorithm: true });\n    setTimeout(() => {\n      this.setState({ isLoading: true });\n      const { grid } = this.state;\n      jps(startNodeCol, startNodeRow, this.state.numColumns - 2, this.state.numRows - 2, grid, this.state.numColumns, this.state.numRows)\n      .then((visitedNodesInOrder) => {\n        this.setState({ isLoading: false });\n        if(visitedNodesInOrder.length > 0 ){\n          // armar camino\n          \n          const path = [];\n          for (let i = 0; i < visitedNodesInOrder.length - 1; i++) {\n            const elem1 = visitedNodesInOrder[i];\n            elem1.jp = true;\n            path.push(elem1);\n\n            const elem2 = visitedNodesInOrder[i + 1];\n            let x = Number(elem1.col);\n            let y = Number(elem1.row);\n            // get the normalized direction of travel\n            const dx = (elem2.col - elem1.col) / Math.max(Math.abs(elem2.col - elem1.col), 1);\n            const dy = (elem2.row - elem1.row) / Math.max(Math.abs(elem2.row - elem1.row), 1);\n            while((x != elem2.col || y != elem2.row)) {\n                if (dx != 0 && dy != 0) {\n                  if (this.isWalkableAt(x, y + dy)) {\n                      path.push({col: String(x), row: String((y + dy))});\n                  } else {\n                      path.push({col: String((x + dx)), row: String(y)});\n                  }\n                  path.push({col: String((x + dx)), row: String((y + dy))});\n                } else if(y != elem2.row && dx == 0) {\n                  path.push({col: String(x), row: String((y + dy))});\n                } else if (x != elem2.col){\n                  path.push({col: String((x + dx)), row: String(y)});\n                }\n                x += dx;\n                y += dy;\n            }\n          }\n          this.animateShortestPath(\n            path\n          );\n          this.setState({ resolved: true });\n        } else {\n          alert(\"Path not found :(\");\n          this.setState({ grid: this.state.grid, visualizingAlgorithm: false });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({ isLoading: false });\n        alert(\"Error call Starknet :(\");\n        this.setState({ grid: this.state.grid, visualizingAlgorithm: false });\n      });            \n    }, this.state.speed);\n}\n\nisWalkableAt = (x, y) => {\n  return this.isInside(x, y) && !this.state.grid[y][x].isWall;\n};\n\nisInside = (x, y) => {\n  return (x >= 0 && x < this.state.width) && (y >= 0 && y < this.state.height);\n};\n\n  animateMaze = (walls) => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        setTimeout(() => {\n          this.clearGrid();\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\n          this.setState({ grid: newGrid, generatingMaze: false });\n        }, i * this.state.mazeSpeed);\n        return;\n      }\n      let wall = walls[i];\n      let node = this.state.grid[wall[0]][wall[1]];\n      setTimeout(() => {\n        //Walls\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall-animated\";\n      }, i * this.state.mazeSpeed);\n    }\n  };\n\n  generateRandomMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    this.setState({ resolved: false });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[this.state.numRows - 2][this.state.numColumns - 2];\n      const walls = randomMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateRecursiveDivisionMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[this.state.numRows - 2][this.state.numColumns - 2];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateVerticalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[this.state.numRows - 2][this.state.numColumns - 2];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  generateHorizontalMaze() {\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\n      return;\n    }\n    this.setState({ generatingMaze: true });\n    setTimeout(() => {\n      const { grid } = this.state;\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[this.state.numRows - 2][this.state.numColumns - 2];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      this.animateMaze(walls);\n    }, this.state.mazeSpeed);\n  }\n\n  render() {\n    let { grid } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\n          generatingMaze={this.state.generatingMaze}\n          visualizeJPS={this.visualizeJPS.bind(this)}\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(this)}\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\n          generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\n          clearGrid={this.clearGrid.bind(this)}\n          clearPath={this.clearPath.bind(this)}\n          updateSpeed={this.updateSpeed.bind(this)}\n          handleNumRows={this.handleNumRows.bind(this)}\n          handleNumColumns={this.handleNumColumns.bind(this)}\n          numRows={this.state.numRows}\n          numColumns={this.state.numColumns}\n        />\n        {this.state.isLoading && <div><img src={loading} \n        style={{display: 'block', marginLeft: 'auto', marginRight: 'auto', width: '5%', height: '5%'}}/></div>}\n        {this.state.resolved && <div><img src={resolved} \n          style={{display: 'block', marginLeft: 'auto', marginRight: 'auto'}}/></div>}\n        <div\n          className={\n            this.state.visualizingAlgorithm || this.state.generatingMaze\n              ? \"grid-visualizing\"\n              : \"grid\"\n          }\n        >\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isShortest,\n                    isWall,\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isShortest={isShortest}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      width={this.state.width}\n                      height={this.state.height}\n                      numRows={this.state.numRows}\n                      numColumns={this.state.numColumns}\n                    ></Node>\n                  );\n                })}\n              </div>\n              \n            );\n            \n          })}\n        </div>\n        </React.Fragment>\n      \n    );\n  }\n}\n\nconst getInitialGrid = (numRows, numColumns) => {\n  let grid = [];\n  for (let row = 0; row < numRows; row++) {\n    let currentRow = [];\n    for (let col = 0; col < numColumns; col++) {\n      currentRow.push(createNode(row, col, numRows, numColumns));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col, numRows, numColumns) => {\n  return {\n    row,\n    col,\n    isStart: row === startNodeRow && col === startNodeCol,\n    isFinish: row === (numRows - 2) && col === (numColumns - 2),\n    distance: Infinity,\n    totalDistance: Infinity,\n    isVisited: false,\n    isShortest: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWalls = (grid, row, col) => {\n  let newGrid = grid.slice();\n  let node = grid[row][col];\n  let newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = {\n      ...node,\n      isWall: true,\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n  return newGrid;\n};\n\nconst getGridWithoutPath = (grid) => {\n  let newGrid = grid.slice();\n  for (let row of grid) {\n    for (let node of row) {\n      let newNode = {\n        ...node,\n        distance: Infinity,\n        totalDistance: Infinity,\n        isVisited: false,\n        isShortest: false,\n        previousNode: null,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  }\n  return newGrid;\n};\n\nconst getVisitedNodesInOrder = (\n  visitedNodesInOrderStart,\n  visitedNodesInOrderFinish\n) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(\n    visitedNodesInOrderStart.length,\n    visitedNodesInOrderFinish.length\n  );\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n  return visitedNodesInOrder;\n};\n\n\n\nexport default PathfindingVisualizer;\n","export function randomMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let walls = [];\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      if (\n        (row === startNode.row && col === startNode.col) ||\n        (row === finishNode.row && col === finishNode.col)\n      )\n        continue;\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/js/dist/dropdown\";\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/preview.0057261d.gif\";","module.exports = __webpack_public_path__ + \"static/media/resolved.18ae7534.gif\";"],"sourceRoot":""}